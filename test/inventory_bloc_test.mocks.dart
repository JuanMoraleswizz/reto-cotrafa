// Mocks generated by Mockito 5.4.5 from annotations
// in reto_cotrafa/test/inventory_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:reto_cotrafa/core/error/failure.dart' as _i7;
import 'package:reto_cotrafa/features/inventory/domain/entity/inventory.dart'
    as _i8;
import 'package:reto_cotrafa/features/inventory/domain/repository/inventory_repository.dart'
    as _i2;
import 'package:reto_cotrafa/features/inventory/domain/repository/product_repository.dart'
    as _i4;
import 'package:reto_cotrafa/features/inventory/domain/use_cases/add_inventory.dart'
    as _i9;
import 'package:reto_cotrafa/features/inventory/domain/use_cases/delete_inventory.dart'
    as _i10;
import 'package:reto_cotrafa/features/inventory/domain/use_cases/delete_products_by_inventory.dart'
    as _i13;
import 'package:reto_cotrafa/features/inventory/domain/use_cases/get_inventaries.dart'
    as _i11;
import 'package:reto_cotrafa/features/inventory/domain/use_cases/get_inventary.dart'
    as _i5;
import 'package:reto_cotrafa/features/inventory/domain/use_cases/update_inventory.dart'
    as _i12;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeInventoryRepository_0 extends _i1.SmartFake
    implements _i2.InventoryRepository {
  _FakeInventoryRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeProductRepository_2 extends _i1.SmartFake
    implements _i4.ProductRepository {
  _FakeProductRepository_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [GetInventaryUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetInventaryUseCase extends _i1.Mock
    implements _i5.GetInventaryUseCase {
  MockGetInventaryUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.InventoryRepository get inventoryRepository =>
      (super.noSuchMethod(
            Invocation.getter(#inventoryRepository),
            returnValue: _FakeInventoryRepository_0(
              this,
              Invocation.getter(#inventoryRepository),
            ),
          )
          as _i2.InventoryRepository);

  @override
  _i6.Future<_i3.Either<_i7.Failure, _i8.Inventory>> call(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#call, [id]),
            returnValue:
                _i6.Future<_i3.Either<_i7.Failure, _i8.Inventory>>.value(
                  _FakeEither_1<_i7.Failure, _i8.Inventory>(
                    this,
                    Invocation.method(#call, [id]),
                  ),
                ),
          )
          as _i6.Future<_i3.Either<_i7.Failure, _i8.Inventory>>);
}

/// A class which mocks [AddInventoryUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddInventoryUseCase extends _i1.Mock
    implements _i9.AddInventoryUseCase {
  MockAddInventoryUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.InventoryRepository get inventoryRepository =>
      (super.noSuchMethod(
            Invocation.getter(#inventoryRepository),
            returnValue: _FakeInventoryRepository_0(
              this,
              Invocation.getter(#inventoryRepository),
            ),
          )
          as _i2.InventoryRepository);

  @override
  _i6.Future<_i3.Either<_i7.Failure, bool>> call(_i8.Inventory? inventory) =>
      (super.noSuchMethod(
            Invocation.method(#call, [inventory]),
            returnValue: _i6.Future<_i3.Either<_i7.Failure, bool>>.value(
              _FakeEither_1<_i7.Failure, bool>(
                this,
                Invocation.method(#call, [inventory]),
              ),
            ),
          )
          as _i6.Future<_i3.Either<_i7.Failure, bool>>);
}

/// A class which mocks [DeleteInventoryUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteInventoryUseCase extends _i1.Mock
    implements _i10.DeleteInventoryUseCase {
  MockDeleteInventoryUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.InventoryRepository get inventoryRepository =>
      (super.noSuchMethod(
            Invocation.getter(#inventoryRepository),
            returnValue: _FakeInventoryRepository_0(
              this,
              Invocation.getter(#inventoryRepository),
            ),
          )
          as _i2.InventoryRepository);

  @override
  _i6.Future<_i3.Either<_i7.Failure, bool>> call(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#call, [id]),
            returnValue: _i6.Future<_i3.Either<_i7.Failure, bool>>.value(
              _FakeEither_1<_i7.Failure, bool>(
                this,
                Invocation.method(#call, [id]),
              ),
            ),
          )
          as _i6.Future<_i3.Either<_i7.Failure, bool>>);
}

/// A class which mocks [GetInventariesUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetInventariesUseCase extends _i1.Mock
    implements _i11.GetInventariesUseCase {
  MockGetInventariesUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.InventoryRepository get inventoryRepository =>
      (super.noSuchMethod(
            Invocation.getter(#inventoryRepository),
            returnValue: _FakeInventoryRepository_0(
              this,
              Invocation.getter(#inventoryRepository),
            ),
          )
          as _i2.InventoryRepository);

  @override
  _i6.Future<_i3.Either<_i7.Failure, List<_i8.Inventory>>> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue:
                _i6.Future<_i3.Either<_i7.Failure, List<_i8.Inventory>>>.value(
                  _FakeEither_1<_i7.Failure, List<_i8.Inventory>>(
                    this,
                    Invocation.method(#call, []),
                  ),
                ),
          )
          as _i6.Future<_i3.Either<_i7.Failure, List<_i8.Inventory>>>);
}

/// A class which mocks [UpdateInventoryUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateInventoryUseCase extends _i1.Mock
    implements _i12.UpdateInventoryUseCase {
  MockUpdateInventoryUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.InventoryRepository get inventoryRepository =>
      (super.noSuchMethod(
            Invocation.getter(#inventoryRepository),
            returnValue: _FakeInventoryRepository_0(
              this,
              Invocation.getter(#inventoryRepository),
            ),
          )
          as _i2.InventoryRepository);

  @override
  _i6.Future<_i3.Either<_i7.Failure, bool>> call(_i8.Inventory? inventory) =>
      (super.noSuchMethod(
            Invocation.method(#call, [inventory]),
            returnValue: _i6.Future<_i3.Either<_i7.Failure, bool>>.value(
              _FakeEither_1<_i7.Failure, bool>(
                this,
                Invocation.method(#call, [inventory]),
              ),
            ),
          )
          as _i6.Future<_i3.Either<_i7.Failure, bool>>);
}

/// A class which mocks [DeleteProductsByInventoryUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteProductsByInventoryUseCase extends _i1.Mock
    implements _i13.DeleteProductsByInventoryUseCase {
  MockDeleteProductsByInventoryUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.ProductRepository get productRepository =>
      (super.noSuchMethod(
            Invocation.getter(#productRepository),
            returnValue: _FakeProductRepository_2(
              this,
              Invocation.getter(#productRepository),
            ),
          )
          as _i4.ProductRepository);

  @override
  _i6.Future<_i3.Either<_i7.Failure, bool>> call(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#call, [id]),
            returnValue: _i6.Future<_i3.Either<_i7.Failure, bool>>.value(
              _FakeEither_1<_i7.Failure, bool>(
                this,
                Invocation.method(#call, [id]),
              ),
            ),
          )
          as _i6.Future<_i3.Either<_i7.Failure, bool>>);
}
