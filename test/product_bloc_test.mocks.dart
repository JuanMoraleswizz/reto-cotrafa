// Mocks generated by Mockito 5.4.5 from annotations
// in reto_cotrafa/test/product_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:reto_cotrafa/core/error/failure.dart' as _i6;
import 'package:reto_cotrafa/features/inventory/domain/entity/product.dart'
    as _i7;
import 'package:reto_cotrafa/features/inventory/domain/repository/product_repository.dart'
    as _i2;
import 'package:reto_cotrafa/features/inventory/domain/use_cases/add_product.dart'
    as _i4;
import 'package:reto_cotrafa/features/inventory/domain/use_cases/delete_product.dart'
    as _i9;
import 'package:reto_cotrafa/features/inventory/domain/use_cases/get_product.dart'
    as _i10;
import 'package:reto_cotrafa/features/inventory/domain/use_cases/get_products_by_inventory.dart'
    as _i11;
import 'package:reto_cotrafa/features/inventory/domain/use_cases/update_product.dart'
    as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeProductRepository_0 extends _i1.SmartFake
    implements _i2.ProductRepository {
  _FakeProductRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [AddProductUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddProductUseCase extends _i1.Mock implements _i4.AddProductUseCase {
  MockAddProductUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ProductRepository get productRepository =>
      (super.noSuchMethod(
            Invocation.getter(#productRepository),
            returnValue: _FakeProductRepository_0(
              this,
              Invocation.getter(#productRepository),
            ),
          )
          as _i2.ProductRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, bool>> call(_i7.Product? product) =>
      (super.noSuchMethod(
            Invocation.method(#call, [product]),
            returnValue: _i5.Future<_i3.Either<_i6.Failure, bool>>.value(
              _FakeEither_1<_i6.Failure, bool>(
                this,
                Invocation.method(#call, [product]),
              ),
            ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, bool>>);
}

/// A class which mocks [UpdateProductUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateProductUseCase extends _i1.Mock
    implements _i8.UpdateProductUseCase {
  MockUpdateProductUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ProductRepository get productRepository =>
      (super.noSuchMethod(
            Invocation.getter(#productRepository),
            returnValue: _FakeProductRepository_0(
              this,
              Invocation.getter(#productRepository),
            ),
          )
          as _i2.ProductRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, bool>> call(_i7.Product? product) =>
      (super.noSuchMethod(
            Invocation.method(#call, [product]),
            returnValue: _i5.Future<_i3.Either<_i6.Failure, bool>>.value(
              _FakeEither_1<_i6.Failure, bool>(
                this,
                Invocation.method(#call, [product]),
              ),
            ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, bool>>);
}

/// A class which mocks [DeleteProductUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteProductUseCase extends _i1.Mock
    implements _i9.DeleteProductUseCase {
  MockDeleteProductUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ProductRepository get productRepository =>
      (super.noSuchMethod(
            Invocation.getter(#productRepository),
            returnValue: _FakeProductRepository_0(
              this,
              Invocation.getter(#productRepository),
            ),
          )
          as _i2.ProductRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, bool>> call(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#call, [id]),
            returnValue: _i5.Future<_i3.Either<_i6.Failure, bool>>.value(
              _FakeEither_1<_i6.Failure, bool>(
                this,
                Invocation.method(#call, [id]),
              ),
            ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, bool>>);
}

/// A class which mocks [GetProductUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetProductUseCase extends _i1.Mock implements _i10.GetProductUseCase {
  MockGetProductUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ProductRepository get productRepository =>
      (super.noSuchMethod(
            Invocation.getter(#productRepository),
            returnValue: _FakeProductRepository_0(
              this,
              Invocation.getter(#productRepository),
            ),
          )
          as _i2.ProductRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.Product>> call(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#call, [id]),
            returnValue: _i5.Future<_i3.Either<_i6.Failure, _i7.Product>>.value(
              _FakeEither_1<_i6.Failure, _i7.Product>(
                this,
                Invocation.method(#call, [id]),
              ),
            ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, _i7.Product>>);
}

/// A class which mocks [GetProductsByInventoryUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetProductsByInventoryUseCase extends _i1.Mock
    implements _i11.GetProductsByInventoryUseCase {
  MockGetProductsByInventoryUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ProductRepository get productRepository =>
      (super.noSuchMethod(
            Invocation.getter(#productRepository),
            returnValue: _FakeProductRepository_0(
              this,
              Invocation.getter(#productRepository),
            ),
          )
          as _i2.ProductRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i7.Product>>> call(
    String? inventoryId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [inventoryId]),
            returnValue:
                _i5.Future<_i3.Either<_i6.Failure, List<_i7.Product>>>.value(
                  _FakeEither_1<_i6.Failure, List<_i7.Product>>(
                    this,
                    Invocation.method(#call, [inventoryId]),
                  ),
                ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, List<_i7.Product>>>);
}
